fn partition(A:[Int], lo:Int, hi:Int):Int {
	var pivot:Int = A[hi];
	var i:Int = lo;
	var j:Int = lo;
	while j < hi {
		if A[j] < pivot {
			var x:Int = A[i];
			A[i] = A[j];
			A[j] = x;
			i = i + 1;
		}
	}

	var x:Int = A[i];	
	A[i] = A[hi];
	A[hi] = A[i];

	return i;
}

fn quicksort(A:[Int], lo:Int, hi:Int) {
	var p:Int = 0;
	if lo < hi {
		p = partition(A, lo, hi);
		quicksort(A, lo, p - 1);
		quicksort(A, p + 1, hi);
	}	
}

fn main() {
	var pole:[Int] = [4,7,2,1,8];
	
	var k :Int = 0;
	while k < len(pole) {
		write(str(pole[k]) + "\n");
		k = k + 1;
	}

	quicksort(pole, 0, len(pole));

	k = 0;
	while k < len(pole) {
		write(str(pole[k]) + "\n");
		k = k + 1;
	}
}
