fn swap(array: [Int], left: Int, right: Int) {
    var tmp: Int = array[right];
    array[right] = array[left];
    array[left] = tmp;
    return;
}

fn quicksort(array: [Int], left: Int, right: Int) {
    if(left < right){
        var boundary: Int = left;
        var i: Int = left + 1;
        while i < right {
            if array[i] < array[left] {
                boundary = boundary + 1;
                swap(array, i, boundary);
            }

            i = i + 1;
        }
        swap(array, left, boundary);
        quicksort(array, left, boundary);
        quicksort(array, boundary + 1, right);
    }

    return;
}

fn main() {
	var pole:[Int] = [4,7,2,1,8];

    write("original:\n");
	var k :Int = 0;
	while k < len(pole) {
		write(str(pole[k]) + "\n");
		k = k + 1;
	}

	write("\n");

	quicksort(pole, 0, len(pole));

    write("sorted:\n");
	k = 0;
	while k < len(pole) {
		write(str(pole[k]) + "\n");
		k = k + 1;
	}

	return;
}
