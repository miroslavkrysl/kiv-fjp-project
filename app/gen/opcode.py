from enum import IntEnum
from typing import Optional


class Opcode(IntEnum):
    """
    Java bytecode instructions opcodes
    """

    NOOP = (0x00, 1, 0, '>B')
    ACONST_NULL = (0x01, 1, 1, '>B')
    ICONST_M1 = (0x02, 1, 1, '>B')
    ICONST_0 = (0x03, 1, 1, '>B')
    ICONST_1 = (0x04, 1, 1, '>B')
    ICONST_2 = (0x05, 1, 1, '>B')
    ICONST_3 = (0x06, 1, 1, '>B')
    ICONST_4 = (0x07, 1, 1, '>B')
    ICONST_5 = (0x08, 1, 1, '>B')
    LCONST_0 = (0x09, 1, 2, '>B')
    LCONST_1 = (0x0A, 1, 2, '>B')
    FCONST_0 = (0x0B, 1, 1, '>B')
    FCONST_1 = (0x0C, 1, 1, '>B')
    FCONST_2 = (0x0D, 1, 1, '>B')
    DCONST_0 = (0x0E, 1, 2, '>B')
    DCONST_1 = (0x0F, 1, 2, '>B')
    BIPUSH = (0x10, 2, 1, '>Bb')
    SIPUSH = (0x11, 3, 1, '>Bh')
    LDC = (0x12, 2, 1, '>BB')
    LDC_W = (0x13, 3, 1, '>BH')
    LDC2_W = (0x14, 3, 2, '>BH')
    ILOAD = (0x15, 2, 1, '>BB')
    LLOAD = (0x16, 2, 2, '>BB')
    FLOAD = (0x17, 2, 1, '>BB')
    DLOAD = (0x18, 2, 2, '>BB')
    ALOAD = (0x19, 2, 1, '>BB')
    ILOAD_0 = (0x1A, 1, 1, '>B')
    ILOAD_1 = (0x1B, 1, 1, '>B')
    ILOAD_2 = (0x1C, 1, 1, '>B')
    ILOAD_3 = (0x1D, 1, 1, '>B')
    LLOAD_0 = (0x1E, 1, 2, '>B')
    LLOAD_1 = (0x1F, 1, 2, '>B')
    LLOAD_2 = (0x20, 1, 2, '>B')
    LLOAD_3 = (0x21, 1, 2, '>B')
    FLOAD_0 = (0x22, 1, 1, '>B')
    FLOAD_1 = (0x23, 1, 1, '>B')
    FLOAD_2 = (0x24, 1, 1, '>B')
    FLOAD_3 = (0x25, 1, 1, '>B')
    DLOAD_0 = (0x26, 1, 2, '>B')
    DLOAD_1 = (0x27, 1, 2, '>B')
    DLOAD_2 = (0x28, 1, 2, '>B')
    DLOAD_3 = (0x29, 1, 2, '>B')
    ALOAD_0 = (0x2A, 1, 1, '>B')
    ALOAD_1 = (0x2B, 1, 1, '>B')
    ALOAD_2 = (0x2C, 1, 1, '>B')
    ALOAD_3 = (0x2D, 1, 1, '>B')
    IALOAD = (0x2E, 1, -1, '>B')
    LALOAD = (0x2F, 1, 0, '>B')
    FALOAD = (0x30, 1, -1, '>B')
    DALOAD = (0x31, 1, 0, '>B')
    AALOAD = (0x32, 1, -1, '>B')
    BALOAD = (0x33, 1, -1, '>B')
    CALOAD = (0x34, 1, -1, '>B')
    SALOAD = (0x35, 1, -1, '>B')
    ISTORE = (0x36, 2, -1, '>BB')
    LSTORE = (0x37, 2, -2, '>BB')
    FSTORE = (0x38, 2, -1, '>BB')
    DSTORE = (0x39, 2, -2, '>BB')
    ASTORE = (0x3A, 2, -1, '>BB')
    ISTORE_0 = (0x3B, 1, -1, '>B')
    ISTORE_1 = (0x3C, 1, -1, '>B')
    ISTORE_2 = (0x3D, 1, -1, '>B')
    ISTORE_3 = (0x3E, 1, -1, '>B')
    LSTORE_0 = (0x3F, 1, -2, '>B')
    LSTORE_1 = (0x40, 1, -2, '>B')
    LSTORE_2 = (0x41, 1, -2, '>B')
    LSTORE_3 = (0x42, 1, -2, '>B')
    FSTORE_0 = (0x43, 1, -1, '>B')
    FSTORE_1 = (0x44, 1, -1, '>B')
    FSTORE_2 = (0x45, 1, -1, '>B')
    FSTORE_3 = (0x46, 1, -1, '>B')
    DSTORE_0 = (0x47, 1, -2, '>B')
    DSTORE_1 = (0x48, 1, -2, '>B')
    DSTORE_2 = (0x49, 1, -2, '>B')
    DSTORE_3 = (0x4A, 1, -2, '>B')
    ASTORE_0 = (0x4B, 1, -1, '>B')
    ASTORE_1 = (0x4C, 1, -1, '>B')
    ASTORE_2 = (0x4D, 1, -1, '>B')
    ASTORE_3 = (0x4E, 1, -1, '>B')
    IASTORE = (0x4F, 1, -3, '>B')
    LASTORE = (0x50, 1, -4, '>B')
    FASTORE = (0x51, 1, -3, '>B')
    DASTORE = (0x52, 1, -4, '>B')
    AASTORE = (0x53, 1, -3, '>B')
    BASTORE = (0x54, 1, -3, '>B')
    CASTORE = (0x55, 1, -3, '>B')
    SASTORE = (0x56, 1, -3, '>B')
    POP = (0x57, 1, -1, '>B')
    POP2 = (0x58, 1, -2, '>B')
    DUP = (0x59, 1, 1, '>B')
    DUP_X1 = (0x5A, 1, 1, '>B')
    DUP_X2 = (0x5B, 1, 1, '>B')
    DUP2 = (0x5C, 1, 2, '>B')
    DUP2_X1 = (0x5D, 1, 2, '>B')
    DUP2_X2 = (0x5E, 1, 2, '>B')
    SWAP = (0x5F, 1, 0, '>B')
    IADD = (0x60, 1, -1, '>B')
    LADD = (0x61, 1, -2, '>B')
    FADD = (0x62, 1, -1, '>B')
    DADD = (0x63, 1, -2, '>B')
    ISUB = (0x64, 1, -1, '>B')
    LSUB = (0x65, 1, -2, '>B')
    FSUB = (0x66, 1, -1, '>B')
    DSUB = (0x67, 1, -2, '>B')
    IMUL = (0x68, 1, -1, '>B')
    LMUL = (0x69, 1, -2, '>B')
    FMUL = (0x6A, 1, -1, '>B')
    DMUL = (0x6B, 1, -2, '>B')
    IDIV = (0x6C, 1, -1, '>B')
    LDIV = (0x6D, 1, -2, '>B')
    FDIV = (0x6E, 1, -1, '>B')
    DDIV = (0x6F, 1, -2, '>B')
    IREM = (0x70, 1, -1, '>B')
    LREM = (0x71, 1, -2, '>B')
    FREM = (0x72, 1, -1, '>B')
    DREM = (0x73, 1, -2, '>B')
    INEG = (0x74, 1, 0, '>B')
    LNEG = (0x75, 1, 0, '>B')
    FNEG = (0x76, 1, 0, '>B')
    DNEG = (0x77, 1, 0, '>B')
    ISHL = (0x78, 1, -1, '>B')
    LSHL = (0x79, 1, -1, '>B')
    ISHR = (0x7A, 1, -1, '>B')
    LSHR = (0x7B, 1, -1, '>B')
    IUSHR = (0x7C, 1, -1, '>B')
    LUSHR = (0x7D, 1, -1, '>B')
    IAND = (0x7E, 1, -1, '>B')
    LAND = (0x7F, 1, -2, '>B')
    IOR = (0x80, 1, -1, '>B')
    LOR = (0x81, 1, -2, '>B')
    IXOR = (0x82, 1, -1, '>B')
    LXOR = (0x83, 1, -2, '>B')
    IINC = (0x84, 3, 0, '>BBb')
    I2L = (0x85, 1, 1, '>B')
    I2F = (0x86, 1, 0, '>B')
    I2D = (0x87, 1, 1, '>B')
    L2I = (0x88, 1, -1, '>B')
    L2F = (0x89, 1, -1, '>B')
    L2D = (0x8A, 1, 0, '>B')
    F2I = (0x8B, 1, 0, '>B')
    F2L = (0x8C, 1, 1, '>B')
    F2D = (0x8D, 1, 1, '>B')
    D2I = (0x8E, 1, -1, '>B')
    D2L = (0x8F, 1, 0, '>B')
    D2F = (0x90, 1, -1, '>B')
    I2B = (0x91, 1, 0, '>B')
    I2C = (0x92, 1, 0, '>B')
    I2S = (0x93, 1, 0, '>B')
    LCMP = (0x94, 1, -3, '>B')
    FCMPL = (0x95, 1, -1, '>B')
    FCMPG = (0x96, 1, -1, '>B')
    DCMPL = (0x97, 1, -3, '>B')
    DCMPG = (0x98, 1, -3, '>B')
    IFEQ = (0x99, 3, -1, '>BH')
    IFNE = (0x9A, 3, -1, '>BH')
    IFLT = (0x9B, 3, -1, '>BH')
    IFGE = (0x9C, 3, -1, '>BH')
    IFGT = (0x9D, 3, -1, '>BH')
    IFLE = (0x9E, 3, -1, '>BH')
    IF_ICMPEQ = (0x9F, 3, -2, '>BH')
    IF_ICMPNE = (0xA0, 3, -2, '>BH')
    IF_ICMPLT = (0xA1, 3, -2, '>BH')
    IF_ICMPGE = (0xA2, 3, -2, '>BH')
    IF_ICMPGT = (0xA3, 3, -2, '>BH')
    IF_ICMPLE = (0xA4, 3, -2, '>BH')
    IF_ACMPEQ = (0xA5, 3, -2, '>BH')
    IF_ACMPNE = (0xA6, 3, -2, '>BH')
    GOTO = (0xA7, 3, 0, '>BH')
    JSR = (0xA8, 3, 1, None)
    RET = (0xA9, 2, 0, None)
    TABLESWITCH = (0xAA, None, -1, None)
    LOOKUPSWITCH = (0xAB, None, -1, None)
    IRETURN = (0xAC, 1, -1, '>B')
    LRETURN = (0xAD, 1, -2, '>B')
    FRETURN = (0xAE, 1, -1, '>B')
    DRETURN = (0xAF, 1, -2, '>B')
    ARETURN = (0xB0, 1, -1, '>B')
    RETURN = (0xB1, 1, 0, '>B')
    GETSTATIC = (0xB2, 3, None, '>BH')
    PUTSTATIC = (0xB3, 3, None, '>BH')
    GETFIELD = (0xB4, 3, None, '>BH')
    PUTFIELD = (0xB5, 3, None, '>BH')
    INVOKEVIRTUAL = (0xB6, 3, None, '>BH')
    INVOKESPECIAL = (0xB7, 3, None, '>BH')
    INVOKESTATIC = (0xB8, 3, None, '>BH')
    INVOKEINTERFACE = (0xB9, 5, None, None)
    INVOKEDYNAMIC = (0xBA, 5, None, None)
    NEW = (0xBB, 3, 1, '>BH')
    NEWARRAY = (0xBC, 2, 0, '>BB')
    ANEWARRAY = (0xBD, 3, 0, '>BH')
    ARRAYLENGTH = (0xBE, 1, 0, '>B')
    ATHROW = (0xBF, 1, None, '>B')
    CHECKCAST = (0xC0, 3, 0, '>BH')
    INSTANCEOF = (0xC1, 3, 0, '>BH')
    MONITORENTER = (0xC2, 1, -1, '>B')
    MONITOREXIT = (0xC3, 1, -1, '>B')
    WIDE = (0xC4, None, None, None)
    MULTIANEWARRAY = (0xC5, 4, None, '>BHB')
    IFNULL = (0xC6, 3, -1, '>BH')
    IFNONNULL = (0xC7, 3, -1, '>BH')
    GOTO_W = (0xC8, 5, None, None)
    JSR_W = (0xC9, 5, None, None)


    def __new__(cls, value: int, length: int, stack_diff: int, fmt: str):
        obj = object.__new__(cls)
        obj._value_ = value
        obj.length = length
        obj.stack_diff = stack_diff
        obj.fmt = fmt
        return obj

    def is_jump(self) -> bool:
        return self == Opcode.IFEQ \
                or self == Opcode.IFNE \
                or self == Opcode.IFLT \
                or self == Opcode.IFGE \
                or self == Opcode.IFGT \
                or self == Opcode.IFLE \
                or self == Opcode.IF_ICMPEQ \
                or self == Opcode.IF_ICMPNE \
                or self == Opcode.IF_ICMPLT \
                or self == Opcode.IF_ICMPGE \
                or self == Opcode.IF_ICMPGT \
                or self == Opcode.IF_ICMPLE \
                or self == Opcode.IF_ACMPEQ \
                or self == Opcode.IF_ACMPNE \
                or self == Opcode.GOTO \
                or self == Opcode.IFNULL \
                or self == Opcode.IFNONNULL
